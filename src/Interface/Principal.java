package Interface;

import DescriptiveStatistics.DescriptiveNumber;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.awt.event.KeyEvent;
import java.util.Comparator;
import java.util.PriorityQueue;
import javax.swing.table.DefaultTableModel;
import java.text.NumberFormat;
import javax.swing.JFormattedTextField;
import javax.swing.JTextField;
import javax.swing.text.NumberFormatter;

/**
 * @author Lucas Vieira
 */
public class Principal extends javax.swing.JFrame {

    public void newTextFielFormated (){
        NumberFormat format = NumberFormat.getNumberInstance();

        NumberFormatter formatter = new NumberFormatter(format);
        formatter.setValueClass(Long.class);
        formatter.setAllowsInvalid(false);
        
        JFormattedTextField filed = new JFormattedTextField(formatter);
        
        filed.getFormatterFactory();
    }
    
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        
        jRadioButtonAmostral.setSelected(true);
        setIcon();
    }
    
    public static ArrayList<DescriptiveNumber> descriptiveList = new ArrayList<>();
    int count = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupDistribuição = new javax.swing.ButtonGroup();
        number5 = new javax.swing.JButton();
        number0 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        number3 = new javax.swing.JButton();
        number6 = new javax.swing.JButton();
        number4 = new javax.swing.JButton();
        number2 = new javax.swing.JButton();
        number1 = new javax.swing.JButton();
        number7 = new javax.swing.JButton();
        number8 = new javax.swing.JButton();
        number9 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableValues = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        txtFrequency = new javax.swing.JFormattedTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jButton13 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton14 = new javax.swing.JButton();
        txtRemoveID = new javax.swing.JFormattedTextField();
        jButton15 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jRadioButtonAmostral = new javax.swing.JRadioButton();
        jRadioButtonPopulacional = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        englishButton = new javax.swing.JButton();
        portugueseButton = new javax.swing.JButton();
        txtValue = new JtextFieldSomenteNumeros();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Statistic Calculator");
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImages(null);
        setResizable(false);
        getContentPane().setLayout(null);

        number5.setText("5");
        number5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number5ActionPerformed(evt);
            }
        });
        getContentPane().add(number5);
        number5.setBounds(110, 290, 60, 30);

        number0.setText("0");
        number0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number0ActionPerformed(evt);
            }
        });
        getContentPane().add(number0);
        number0.setBounds(40, 370, 60, 30);

        jButton3.setText(".");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(110, 370, 60, 30);

        buttonAdd.setBackground(new java.awt.Color(0, 0, 204));
        buttonAdd.setForeground(new java.awt.Color(255, 255, 255));
        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });
        getContentPane().add(buttonAdd);
        buttonAdd.setBounds(180, 370, 60, 30);

        number3.setText("3");
        number3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number3ActionPerformed(evt);
            }
        });
        getContentPane().add(number3);
        number3.setBounds(180, 330, 60, 30);

        number6.setText("6");
        number6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number6ActionPerformed(evt);
            }
        });
        getContentPane().add(number6);
        number6.setBounds(180, 290, 60, 30);

        number4.setText("4");
        number4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number4ActionPerformed(evt);
            }
        });
        getContentPane().add(number4);
        number4.setBounds(40, 290, 60, 30);

        number2.setText("2");
        number2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number2ActionPerformed(evt);
            }
        });
        getContentPane().add(number2);
        number2.setBounds(110, 330, 60, 30);

        number1.setText("1");
        number1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number1ActionPerformed(evt);
            }
        });
        getContentPane().add(number1);
        number1.setBounds(40, 330, 60, 30);

        number7.setText("7");
        number7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number7ActionPerformed(evt);
            }
        });
        getContentPane().add(number7);
        number7.setBounds(40, 250, 60, 30);

        number8.setText("8");
        number8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number8ActionPerformed(evt);
            }
        });
        getContentPane().add(number8);
        number8.setBounds(110, 250, 60, 30);

        number9.setText("9");
        number9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number9ActionPerformed(evt);
            }
        });
        getContentPane().add(number9);
        number9.setBounds(180, 250, 60, 30);

        jPanel1.setBackground(new java.awt.Color(0, 0, 204));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Calculadora Estatística");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(250, 40, 430, 29);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(-10, 0, 740, 100);

        jLabel2.setText("Valor:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(40, 150, 50, 16);

        tableValues.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Valor", "Frequência"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableValues);
        if (tableValues.getColumnModel().getColumnCount() > 0) {
            tableValues.getColumnModel().getColumn(0).setMinWidth(15);
            tableValues.getColumnModel().getColumn(0).setPreferredWidth(15);
            tableValues.getColumnModel().getColumn(1).setPreferredWidth(50);
            tableValues.getColumnModel().getColumn(2).setPreferredWidth(50);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(290, 170, 210, 200);

        jLabel3.setText("Tabela de Valores");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(290, 150, 110, 16);

        jRadioButton1.setText("Frequência");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jRadioButton1);
        jRadioButton1.setBounds(40, 210, 100, 30);

        txtFrequency.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        txtFrequency.setEnabled(false);
        txtFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFrequencyActionPerformed(evt);
            }
        });
        txtFrequency.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFrequencyKeyPressed(evt);
            }
        });
        getContentPane().add(txtFrequency);
        txtFrequency.setBounds(150, 210, 90, 30);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escolha uma Opção", "Média Aritmética", "Média Geométrica", "Mediana", "Amplitude", "Variância", "Desvio Padrão", "Erro Padrão", "Coeficiente de Variação" }));
        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(530, 170, 160, 26);

        jLabel4.setText("Cálculo:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(530, 150, 60, 16);

        jButton13.setBackground(new java.awt.Color(0, 0, 255));
        jButton13.setForeground(new java.awt.Color(255, 255, 255));
        jButton13.setText("Calcular");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton13);
        jButton13.setBounds(530, 200, 160, 30);

        jLabel5.setText("Remover Valor por ID:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(530, 320, 160, 16);

        jButton14.setBackground(new java.awt.Color(255, 0, 0));
        jButton14.setForeground(new java.awt.Color(255, 255, 255));
        jButton14.setText("Remover");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton14);
        jButton14.setBounds(530, 370, 160, 30);

        txtRemoveID.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtRemoveID.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        txtRemoveID.setMinimumSize(new java.awt.Dimension(6, 20));
        txtRemoveID.setPreferredSize(new java.awt.Dimension(6, 20));
        txtRemoveID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRemoveIDKeyPressed(evt);
            }
        });
        getContentPane().add(txtRemoveID);
        txtRemoveID.setBounds(530, 340, 160, 20);

        jButton15.setText("Ordenar");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton15);
        jButton15.setBounds(290, 380, 100, 28);

        jButton2.setBackground(new java.awt.Color(255, 0, 0));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Limpar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(400, 380, 100, 28);

        buttonGroupDistribuição.add(jRadioButtonAmostral);
        jRadioButtonAmostral.setText("Amostral");
        getContentPane().add(jRadioButtonAmostral);
        jRadioButtonAmostral.setBounds(530, 260, 160, 20);

        buttonGroupDistribuição.add(jRadioButtonPopulacional);
        jRadioButtonPopulacional.setText("Populacional");
        getContentPane().add(jRadioButtonPopulacional);
        jRadioButtonPopulacional.setBounds(530, 280, 160, 18);

        jLabel6.setText("Distribuição:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(530, 240, 100, 16);

        englishButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/enIcon.png"))); // NOI18N
        englishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                englishButtonActionPerformed(evt);
            }
        });
        getContentPane().add(englishButton);
        englishButton.setBounds(690, 110, 20, 20);

        portugueseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/ptIcon.png"))); // NOI18N
        portugueseButton.setEnabled(false);
        getContentPane().add(portugueseButton);
        portugueseButton.setBounds(663, 110, 20, 20);

        txtValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtValueKeyPressed(evt);
            }
        });
        getContentPane().add(txtValue);
        txtValue.setBounds(40, 170, 200, 30);

        setSize(new java.awt.Dimension(732, 460));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        if(jRadioButton1.isSelected()){
            txtFrequency.setEnabled(true);
        }
        if (!jRadioButton1.isSelected()){
            txtFrequency.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void txtFrequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFrequencyActionPerformed
        enable();
    }//GEN-LAST:event_txtFrequencyActionPerformed

    private void number0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number0ActionPerformed
        txtValue.setText(txtValue.getText() + "0");
    }//GEN-LAST:event_number0ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        txtValue.setText(txtValue.getText() + ".");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void number1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number1ActionPerformed
        txtValue.setText(txtValue.getText() + "1");
    }//GEN-LAST:event_number1ActionPerformed

    private void number2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number2ActionPerformed
        txtValue.setText(txtValue.getText() + "2");
    }//GEN-LAST:event_number2ActionPerformed

    private void number3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number3ActionPerformed
        txtValue.setText(txtValue.getText() + "3");
    }//GEN-LAST:event_number3ActionPerformed

    private void number4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number4ActionPerformed
        txtValue.setText(txtValue.getText() + "4");
    }//GEN-LAST:event_number4ActionPerformed

    private void number5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number5ActionPerformed
        txtValue.setText(txtValue.getText() + "5");
    }//GEN-LAST:event_number5ActionPerformed

    private void number6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number6ActionPerformed
        txtValue.setText(txtValue.getText() + "6");
    }//GEN-LAST:event_number6ActionPerformed

    private void number7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number7ActionPerformed
        txtValue.setText(txtValue.getText() + "7");
    }//GEN-LAST:event_number7ActionPerformed

    private void number8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number8ActionPerformed
        txtValue.setText(txtValue.getText() + "8");
    }//GEN-LAST:event_number8ActionPerformed

    private void number9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number9ActionPerformed
        txtValue.setText(txtValue.getText() + "9");
    }//GEN-LAST:event_number9ActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        validateNewValue();
    }//GEN-LAST:event_buttonAddActionPerformed

    private void txtFrequencyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFrequencyKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            validateNewValue();
        }
    }//GEN-LAST:event_txtFrequencyKeyPressed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        if(descriptiveList.isEmpty()){
            JOptionPane.showMessageDialog(null, "ERRO: Tabela vazia!");
        }else{
            switch (jComboBox1.getSelectedIndex()){
                case 0: 
                    JOptionPane.showMessageDialog(null, "ERRO: Escolha uma Operação!");
                    break;
                case 1:
                    JOptionPane.showMessageDialog(null, "Media = " +(sumNumberListed(descriptiveList)/descriptiveList.size()));
                    break;
                case 2:
                    calculateGeometricMean();
                    break;
                case 3: 
                    calculateMediana(descriptiveList);
                    break;
                case 4:
                    calculateAmplitude(descriptiveList);
                    break;
                case 5:
                    calculateVariancia();
                    break;
                case 6:
                    desvioPadrao();
                    break;
                case 7:
                    erroPadrao();
                    break;
                case 8:
                    coefVar();
                    break;
            }
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        removeID(Integer.parseInt(txtRemoveID.getText()));
    }//GEN-LAST:event_jButton14ActionPerformed

    private void txtRemoveIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRemoveIDKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            removeID(Integer.parseInt(txtRemoveID.getText()));
        }
    }//GEN-LAST:event_txtRemoveIDKeyPressed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        descriptiveList = sortList(descriptiveList);
        showTable();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        descriptiveList.removeAll(descriptiveList);
        showTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void englishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_englishButtonActionPerformed
        
        PrincipalEnlgish englishScreen = new PrincipalEnlgish();
        englishScreen.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_englishButtonActionPerformed

    private void txtValueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValueKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            validateNewValue();
        }
    }//GEN-LAST:event_txtValueKeyPressed

    private void validateNewValue (){
        Double value;
        int frequency;

        if(txtValue.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "ERRO: Insira um valor!");
        }else if(!validateDoubleValue(Double.parseDouble(txtValue.getText()) )){
            JOptionPane.showMessageDialog(null, "ERRO: Valor negativo inserido!");
        }else if ( txtFrequency.isEnabled() && txtFrequency.getText().isEmpty() ){
            JOptionPane.showMessageDialog(null, "ERRO: Frequência nula!");
        }else if ( txtFrequency.isEnabled() && Integer.parseInt(txtFrequency.getText())<=0){
            JOptionPane.showMessageDialog(null, "ERRO: Frequência negativa!");
        }else{
            value = Double.parseDouble(txtValue.getText());
            
            if(txtFrequency.isEnabled()){
                frequency = Integer.parseInt(txtFrequency.getText());
            }else {
                frequency = 1;
            }
            
            txtValue.setText("");
            txtFrequency.setText("");
            
            DescriptiveNumber newNumber = new DescriptiveNumber(value, frequency);
            descriptiveList.add(newNumber);
            
            showTable();
        }
    }
    
    static boolean validateDoubleValue (Double value){
        if(value >= 0){
            return true;
        }
        return false;
    }
    
    static boolean validateIntValue (int value){
        if(value >= 1){
            return true;
        }
        return false;
    }
    
    static void saveValue (Double value, int frequency){
        DescriptiveNumber number = new DescriptiveNumber(value, frequency);
        
        descriptiveList.add(number);
    }
    
    public void showTable (){
        DescriptiveNumber savedNumber = new DescriptiveNumber();
        
        DefaultTableModel dtmValues = (DefaultTableModel) tableValues.getModel();
        dtmValues.setNumRows(0);
        
        for (int i=0; i<descriptiveList.size(); i++){
            savedNumber = descriptiveList.get(i);
            dtmValues.addRow(new Object[]{
                i+1,
                savedNumber.getNumber(),
                savedNumber.getFrequency()
            });
            
        }
    }
    
    public void removeID (int intRemove){
        if ( !validateIntValue(intRemove) ){
            JOptionPane.showMessageDialog(null, "ERRO: ID Inválido!");
            txtRemoveID.setText("");
        }else if ( intRemove-1 >= descriptiveList.size() ){
            JOptionPane.showMessageDialog(null, "ERRO: ID não existente!");
        }else{
            descriptiveList.remove( intRemove -1 );
            showTable();
            txtRemoveID.setText("");
        }
    }
    
    public ArrayList<DescriptiveNumber> sortList (ArrayList<DescriptiveNumber> list){
        Comparator<DescriptiveNumber> compare = new Comparator<DescriptiveNumber>() {
            public int compare(DescriptiveNumber t, DescriptiveNumber t1) {
                if (t.getNumber() < t1.getNumber()){
                    return -1;
                }
                if (t.getNumber() > t1.getNumber()){
                    return 1;
                }
                return 0;
            }
        };
        PriorityQueue<DescriptiveNumber> sortedList = new PriorityQueue<>(compare);
        
        int k = list.size();
        for (int i=0; i<k; i++){
            sortedList.add(list.remove(0));
        }
        
        k = sortedList.size();
        for (int i=0; i<k; i++){
            list.add(sortedList.remove());
        }
        return list;
    }
    
    public double sumNumberListed (ArrayList<DescriptiveNumber> list){
        double sum=0;
        DescriptiveNumber aux = new DescriptiveNumber();
        
        for (int i=0; i< list.size(); i++){
            aux = list.get(i);
            sum = sum + aux.getNumber();
        }
        return sum;
    }
    
    public double sumNumberQuadrado (ArrayList<DescriptiveNumber> list){
        double sum=0;
        DescriptiveNumber aux = new DescriptiveNumber();
        
        for (int i=0; i< list.size(); i++){
            aux = list.get(i);
            sum = sum + (aux.getNumber() * aux.getNumber() );
        }
        return sum;
    }
    
    public double multiplicationNumberListed (ArrayList<DescriptiveNumber> list){
        double sum=1;
        DescriptiveNumber aux = new DescriptiveNumber();
        
        for (int i=0; i< list.size(); i++){
            aux = list.get(i);
            sum = sum * aux.getNumber();
        }
        return sum;
    }
    
    public void calculateGeometricMean (){
        JOptionPane.showMessageDialog(null, "Média Geométrica = " +geometricMean());
    }
    
    public double geometricMean (){
        double sumNumber = multiplicationNumberListed(descriptiveList);
        double number = descriptiveList.size();
        System.out.println(1/number);
        return Math.pow(sumNumber, 1/number );
    }
    
    public double medianaImpar (ArrayList<DescriptiveNumber> listAux){
        int nAux = (listAux.size()/2);
        
        DescriptiveNumber desNumb = listAux.get(nAux);
        
        return desNumb.getNumber();
    }
    
    public double medianaPar (ArrayList<DescriptiveNumber> listAux){
        int nAux = (listAux.size()/2)-1;
        DescriptiveNumber desNumb = new DescriptiveNumber();
        double doubleAux;
        
        desNumb = listAux.get(nAux);
        doubleAux = desNumb.getNumber();
        desNumb = listAux.get(nAux+1);
        doubleAux = doubleAux + desNumb.getNumber();
        
        return doubleAux/2;
    }
    
    public void calculateMediana(ArrayList<DescriptiveNumber> listAux){
        listAux = sortList(listAux);
        double valueMediana;
        if (listAux.size() %2 == 0){
            valueMediana = medianaPar(listAux);
        }else{
            valueMediana = medianaImpar(listAux);
        }
        
        JOptionPane.showMessageDialog(null, "Mediana = " +valueMediana);
    }
    
    public void calculateAmplitude (ArrayList<DescriptiveNumber> listAux){
        sortList(listAux);
        DescriptiveNumber newNumber = new DescriptiveNumber();
        
        newNumber = listAux.get(0);
        double valueAux = newNumber.getNumber();
        newNumber = listAux.get(listAux.size() - 1);
        valueAux = newNumber.getNumber() - valueAux;
        
        JOptionPane.showMessageDialog(null, "Amplitude = " +valueAux);
    }
    
    public double varAmostral (){
        double valueSumNum = sumNumberListed(descriptiveList);
        valueSumNum = Math.pow(valueSumNum, 2);
        valueSumNum = valueSumNum/descriptiveList.size();
        double valueSumQuadNum = sumNumberQuadrado(descriptiveList);
        double aux = descriptiveList.size();
        aux = aux -1;
        aux = 1/aux;
        return aux*(valueSumQuadNum-valueSumNum);
    }
    
    public double varPopulacional (){
        double valueSumNum = sumNumberListed(descriptiveList);
        valueSumNum = Math.pow(valueSumNum, 2);
        valueSumNum = valueSumNum/descriptiveList.size();
        double valueSumQuadNum = sumNumberQuadrado(descriptiveList);
        double aux = descriptiveList.size();
        aux = 1/aux;
        return aux*(valueSumQuadNum-valueSumNum);
    }
    
    public void calculateVariancia (){
        double value;
        if (jRadioButtonAmostral.isSelected()){
            value = varAmostral();
        }else{
            value = varPopulacional();
        }
        JOptionPane.showMessageDialog(null, "Variância = " +value);
    }
    
    public void desvioPadrao (){
        double aux;
        if (jRadioButtonAmostral.isSelected()){
            aux = varAmostral();
        }else {
            aux = varPopulacional();
        }
        aux = Math.sqrt(aux);
        JOptionPane.showMessageDialog(null, "Desvio padrâo = " +aux);
    }
    
    public void erroPadrao (){
        double aux;
        if (jRadioButtonAmostral.isSelected()){
            aux = varAmostral();
        }else {
            aux = varPopulacional();
        }
        aux = Math.sqrt(aux);
        aux = aux/Math.sqrt(descriptiveList.size());
        JOptionPane.showMessageDialog(null, "Erro Padrão = " +aux);
    }
    
    public void coefVar (){
        double aux;
        if (jRadioButtonAmostral.isSelected()){
            aux = varAmostral();
        }else {
            aux = varPopulacional();
        }
        aux = Math.sqrt(aux);
        double median;
        median = sumNumberListed(descriptiveList)/descriptiveList.size();
        JOptionPane.showMessageDialog(null, "Coeficiente de Variação = " +((aux/median)*100) +"%");
    }
    
    private void setIcon(){
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Icon.png")));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.ButtonGroup buttonGroupDistribuição;
    private javax.swing.JButton englishButton;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButtonAmostral;
    private javax.swing.JRadioButton jRadioButtonPopulacional;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton number0;
    private javax.swing.JButton number1;
    private javax.swing.JButton number2;
    private javax.swing.JButton number3;
    private javax.swing.JButton number4;
    private javax.swing.JButton number5;
    private javax.swing.JButton number6;
    private javax.swing.JButton number7;
    private javax.swing.JButton number8;
    private javax.swing.JButton number9;
    private javax.swing.JButton portugueseButton;
    private javax.swing.JTable tableValues;
    private javax.swing.JFormattedTextField txtFrequency;
    private javax.swing.JFormattedTextField txtRemoveID;
    private javax.swing.JTextField txtValue;
    // End of variables declaration//GEN-END:variables

    public final class JtextFieldSomenteNumeros extends JTextField {

        private int maximoCaracteres = -1;// definição de -1 
        // como  valor normal de um textfield sem limite de caracters

        public JtextFieldSomenteNumeros() {
            super();
            addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyTyped(java.awt.event.KeyEvent evt) {
                    jTextFieldKeyTyped(evt);
                }
            });
        }

        public JtextFieldSomenteNumeros(int maximo) {
            super();
            setMaximoCaracteres(maximo);// define o tamanho máximo
            //que deve ser aceito no jtextfield que foi recebido no  construtor

            addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyTyped(java.awt.event.KeyEvent evt) {
                    jTextFieldKeyTyped(evt);
                }
            });
        }

        private void jTextFieldKeyTyped(KeyEvent evt) {

            String caracteres = ".0987654321";// lista de caracters que não devem ser aceitos
            if (!caracteres.contains(evt.getKeyChar() + "")) {// se o caracter que gerou o 
                //evento estiver não estiver na lista
                evt.consume();//aciona esse propriedade para eliminar a ação do evento
            }
            if ((getText().length() >= getMaximoCaracteres()) && (getMaximoCaracteres() != -1)) {
                //if para saber se precisa verificar também o tamanho da string do campo
                // maior ou igual ao tamanho máximo, cancela e nao deixa inserir mais
                evt.consume();
                setText(getText().substring(0, getMaximoCaracteres()));
                // esta linha acima é para remover os caracters inválidos caso o usuário tenha 
                //copiado o //conteúdo de algum lugar, ou seja, com tamanho maior que o definido

            }//fim do if do tamanho da string do campo

        }

        public int getMaximoCaracteres() {
            return maximoCaracteres;
        }

        public void setMaximoCaracteres(int maximoCaracteres) {
            this.maximoCaracteres = maximoCaracteres;
        }
    }
}
